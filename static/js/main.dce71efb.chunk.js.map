{"version":3,"sources":["components/Footer.js","helpers/savings.js","pages/Home.js","pages/Page1.js","App.js","serviceWorker.js","index.js"],"names":["Footer","color","className","fluid","md","href","Date","getFullYear","dateFormat","require","daysInYear","days","currentDate","currentDay","dayOfYear","currentYear","daysInCurrentYear","totalSavings","totalDays","dayDate","setDate","dayData","day","date","week","passed","current","increment","totalSoFar","friendly","toFixed","push","withRouter","allDays","forEach","getCurrentDay","length","App","exact","path","component","Home","Page1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dce71efb.chunk.js","sourcesContent":["import React from \"react\";\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\n\nexport const Footer = () => {\n  return (\n    <MDBFooter color=\"default-color\" className=\"font-small pt-4 mt-4\">\n      <MDBContainer fluid className=\"text-center text-md-left\">\n        <MDBRow>\n          <MDBCol md=\"6\">\n            <h5 className=\"title\">Footer Content</h5>\n            <p>\n              Here you can use rows and columns here to organize your footer\n              content.\n            </p>\n          </MDBCol>\n          <MDBCol md=\"6\">\n            <h5 className=\"title\">Links</h5>\n            <ul className=\"list-unstyled\">\n              <li>\n                <a href=\"#!\">Link 1</a>\n              </li>\n              <li>\n                <a href=\"#!\">Link 2</a>\n              </li>\n              <li>\n                <a href=\"#!\">Link 3</a>\n              </li>\n              <li>\n                <a href=\"#!\">Link 4</a>\n              </li>\n            </ul>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n      <div className=\"footer-copyright text-center py-3\">\n        <MDBContainer fluid>\n          &copy; {new Date().getFullYear()} Copyright:{\" \"}\n          <a href=\"https://www.MDBootstrap.com\"> MDBootstrap.com </a>\n        </MDBContainer>\n      </div>\n    </MDBFooter>\n  );\n};\n","import { dayOfYear } from \"weeknumber\";\nconst dateFormat = require(\"dateformat-light\");\nconst daysInYear = require(\"year-days\");\n\nconst days = () => {\n  const currentDate = new Date();\n  const currentDay = dayOfYear(currentDate);\n  const currentYear = currentDate.getFullYear();\n  const daysInCurrentYear = daysInYear(currentYear);\n  const dateFriendlyFormat = \"dS mmmm yyyy\";\n\n  let totalSavings = 0;\n  let days = [];\n  let totalDays = 1;\n  let increment = 1;\n  while (totalDays <= daysInCurrentYear) {\n    let dayDate = dateFormat(\n      new Date(currentYear, 0).setDate(totalDays),\n      \"yyyy-mm-dd\"\n    );\n    let dayData = {};\n    dayData.day = totalDays;\n    dayData.date = dayDate;\n    dayData.week = dateFormat(dayDate, \"W\");\n    totalDays < currentDay ? (dayData.passed = true) : (dayData.passed = false);\n    totalDays === currentDay\n      ? (dayData.current = true)\n      : (dayData.current = false);\n\n    dayData.increment = totalDays * increment;\n\n    totalSavings = totalSavings + dayData.increment;\n\n    dayData.totalSoFar = totalSavings;\n\n    dayData.friendly = {};\n    dayData.friendly.date = dateFormat(dayDate, dateFriendlyFormat);\n    dayData.friendly.increment = \"£\" + (dayData.increment / 100).toFixed(2);\n    dayData.friendly.totalSoFar = \"£\" + (dayData.totalSoFar / 100).toFixed(2);\n\n    days.push(dayData);\n    totalDays++;\n  }\n\n  return days;\n};\nexport default days;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nimport days from \"../helpers/savings\";\nconst dateFormat = require(\"dateformat-light\");\n\nconst Home = () => {\n  const allDays = days();\n  const currentDate = new Date();\n  const getCurrentDay = () => {\n    let currentDay = {};\n    allDays.forEach(day => {\n      if (day.current === true) {\n        currentDay = day;\n      }\n    });\n    return currentDay;\n  };\n  const currentDay = getCurrentDay();\n  return (\n    <section className=\"page-content\">\n      <MDBContainer fluid>\n        <MDBRow>\n          <MDBCol>\n            <h1>\n              {allDays.length} days of saving in {dateFormat(currentDate, 'yyyy')}\n            </h1>\n            <h2>{currentDay.friendly.date}</h2>\n            <p>Today we're banking {currentDay.friendly.increment}, which brings our total to {currentDay.friendly.totalSoFar}.</p>\n            <p>This year, we're aiming for a total of {allDays[allDays.length-1].friendly.totalSoFar}!</p>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    </section>\n  );\n};\n\nexport default withRouter(Home);\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\n\nconst Page1 = () => {\n  return (\n    <section className=\"page-content\">\n      <MDBContainer fluid>\n        <MDBRow>\n          <MDBCol>\n            <h1>Page 1 content</h1>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    </section>\n  );\n};\n\nexport default withRouter(Page1);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// import { Header } from \"./components/Header\";\nimport { Footer } from \"./components/Footer\";\n\nimport Home from \"./pages/Home\";\nimport Page1 from \"./pages/Page1\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        {/* <Header /> */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/page1\" component={Page1} />\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"./assets/scss/mdb.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}